class Node:
    def __init__(self, data = 0, next = None):
        self.data = data
        self.next = next

class LinkedList:
    def __init__(self, head: Node):
        self.currentnode = head


def MergeList(List1: LinkedList, List2: LinkedList):
    L1 = List1.currentnode
    L2 = List2.currentnode

    ResultList = LinkedList(None)
    if(L1.data <= L2.data):
        ResultList.currentnode = L1
        L1 = L1.next
    else:
        ResultList.currentnode = L2
        L2 = L2.next

#currentnode of ResultList already has first element
        
    while L1 != None and L2 != None:
        if L1.data <= L2.data:
            ResultList.currentnode.next = L1
            L1 = L1.next
        else:
            ResultList.currentnode.next = L2
            L2 = L2.next

    while L1 != None:
        ResultList.currentnode.next = L1
        L1 = L1.next

    while L2 != None:
        ResultList.currentnode.next = L2
        L2 = L2.next


    return ResultList

def MergeList_New(Node1: Node, Node2: Node):

    while Node1 != None and Node2 != None:
        if Node1.data <= Node2.data:
            
        
    
    
            
            


#################################################################
Node1 = Node(2, None)
Node2 = Node(5, None)
Node3 = Node(7, None)

Node1.next = Node2
Node2.next = Node3


    
L1 = LinkedList(Node1)

Node5 = Node(11, None)
Node4 = Node(3, Node5)

L2 = LinkedList(Node4)

AnswerList = MergeList(L1, L2)

NodeHolder = AnswerList.currentnode

while NodeHolder != None:
    print(NodeHolder.data, end = ' ')
    NodeHolder = NodeHolder.next
